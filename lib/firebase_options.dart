// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart' show Firebase, FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

class FirebaseService {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> registerUser(String name, String email, String password, String phoneNumber) async {
    try {
      // Authentication
      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      // Firestore data storage
      await _firestore.collection('users').doc(userCredential.user!.uid).set({
        'name': name,
        'email': email,
        'phoneNumber': phoneNumber,
      });
    } catch (e) {
      print('Error registering user: $e');
    }
  }
  static Future<void> initializeFirebase() async {
    await Firebase.initializeApp();
  }
}

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyApjuv0DlbqNn5YZpT2jrSBggPyEarStBM',
    appId: '1:139598844801:web:062388646f5f1821f04e80',
    messagingSenderId: '139598844801',
    projectId: 'ayurveda-58eb7',
    authDomain: 'ayurveda-58eb7.firebaseapp.com',
    storageBucket: 'ayurveda-58eb7.appspot.com',
    measurementId: 'G-P5P3E0SP5C',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyDG7JngE07TlLqUBGoJpeKciuXIcIaAQnI',
    appId: '1:139598844801:android:539d0be33eb16080f04e80',
    messagingSenderId: '139598844801',
    projectId: 'ayurveda-58eb7',
    storageBucket: 'ayurveda-58eb7.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyB8nxaRtlDK5lasa2Lpbeeg7RtSt8Bl7ko',
    appId: '1:139598844801:ios:a372dec670562649f04e80',
    messagingSenderId: '139598844801',
    projectId: 'ayurveda-58eb7',
    storageBucket: 'ayurveda-58eb7.appspot.com',
    iosBundleId: 'com.example.vedaAyur',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyB8nxaRtlDK5lasa2Lpbeeg7RtSt8Bl7ko',
    appId: '1:139598844801:ios:a6462f59e8164acdf04e80',
    messagingSenderId: '139598844801',
    projectId: 'ayurveda-58eb7',
    storageBucket: 'ayurveda-58eb7.appspot.com',
    iosBundleId: 'com.example.vedaAyur.RunnerTests',
  );
}
